{"version":3,"file":"index-legacy.dde6050b.js","sources":["../../utils/chaikin.js","../../preact/jsx-runtime","../../app.jsx","../../assets/arrow-down-white.png","../../icons/icon-standalone.svg"],"sourcesContent":["// 1. https://observablehq.com/@dvreed77/chaikin\n// 2. https://www.npmjs.com/package/chaikin\nfunction cut(start, end, ratio) {\n  const r1 = [\n    start[0] * (1 - ratio) + end[0] * ratio,\n    start[1] * (1 - ratio) + end[1] * ratio,\n  ];\n  const r2 = [\n    start[0] * ratio + end[0] * (1 - ratio),\n    start[1] * ratio + end[1] * (1 - ratio),\n  ];\n  return [r1, r2];\n}\nfunction chaikin(pts, iterations = 1, closed = true, ratio = 0.25) {\n  if (iterations > 10) iterations = 10;\n  if (iterations == 0) return pts;\n\n  if (closed) {\n    const nCorners = pts.length;\n\n    const newPts = [];\n    for (let i = 0; i < nCorners; i++) {\n      const ptA = pts[i];\n      const ptB = pts[(i + 1) % nCorners];\n\n      const [newPtA, newPtB] = cut(ptA, ptB, ratio);\n\n      newPts.push(newPtA, newPtB);\n    }\n\n    return chaikin(newPts, iterations - 1, closed, ratio);\n  } else {\n    if (ratio > 0.5) {\n      ratio = 1 - ratio;\n    }\n\n    for (let i = 0; i < iterations; i++) {\n      let refined = [];\n      refined.push(pts[0]);\n\n      for (let j = 1; j < pts.length; j++) {\n        let points = cut(pts[j - 1], pts[j], ratio);\n        refined = refined.concat(points);\n      }\n\n      if (closed) {\n        refined = refined.concat(cut(pts[pts.length - 1], pts[0], ratio));\n      } else {\n        refined.push(pts[pts.length - 1]);\n      }\n\n      pts = refined;\n    }\n    return pts;\n  }\n}\n\nexport default chaikin;\n","import * as jsxRuntime from \"/home/runner/work/checkweather-sg/checkweather-sg/node_modules/preact/jsx-runtime/dist/jsxRuntime.js\"\nexport const jsx = jsxRuntime.jsx\nexport const jsxs = jsxRuntime.jsxs\nexport const Fragment = jsxRuntime.Fragment","import { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport useInterval from 'react-use/lib/useInterval';\nimport useRafState from 'react-use/lib/useRafState';\nimport maplibregl from 'maplibre-gl';\nimport { contours } from 'd3-contour';\nimport nanomemoize from 'nano-memoize';\nimport { featureCollection, point, polygon, round } from '@turf/helpers';\n\nconst { VITE_MAPTILER_KEY: MAPTILER_KEY } = import.meta.env;\n\nimport { initializeApp } from 'firebase/app';\nimport {\n  getFirestore,\n  query,\n  collection,\n  orderBy,\n  limit,\n  onSnapshot,\n} from 'firebase/firestore';\n\nimport arrowPath from './assets/arrow-down-white.png';\nimport iconSVGPath from './icons/icon-standalone.svg';\n\nimport chaikin from './utils/chaikin';\n\n// const TESTING_MODE = location.hash === '#test-mode';\n// import testSnapshot from './utils/testSnapshot';\n\n// Initialize Firebase\nconst firebaseApp = initializeApp({\n  projectId: 'check-weather-sg',\n});\nconst db = getFirestore(firebaseApp);\n\nconst width = 217,\n  height = 120;\nconst center = [103.8475, 1.3011];\nconst lowerLat = 1.156,\n  upperLat = 1.475,\n  lowerLong = 103.565,\n  upperLong = 104.13;\nconst distanceLong = Math.abs(upperLong - lowerLong);\nconst distanceLat = Math.abs(upperLat - lowerLat);\n\nconst bboxGeoJSON = polygon([\n  [\n    [-180, 90],\n    [180, 90],\n    [180, -90],\n    [-180, -90],\n    [-180, 90],\n  ],\n  [\n    [lowerLong, upperLat],\n    [upperLong, upperLat],\n    [upperLong, lowerLat],\n    [lowerLong, lowerLat],\n    [lowerLong, upperLat],\n  ],\n]);\n\nconst intensityColors = [\n  '#40FFFD',\n  '#3BEEEC',\n  '#32D0D2',\n  '#2CB9BD',\n  '#229698',\n  '#1C827D',\n  '#1B8742',\n  '#229F44',\n  '#27B240',\n  '#2CC53B',\n  '#30D43E',\n  '#38EF46',\n  '#3BFB49',\n  '#59FA61',\n  '#FEFB63',\n  '#FDFA53',\n  '#FDEB50',\n  '#FDD74A',\n  '#FCC344',\n  '#FAB03F',\n  '#FAA23D',\n  '#FB8938',\n  '#FB7133',\n  '#F94C2D',\n  '#F9282A',\n  '#DD1423',\n  '#BE0F1D',\n  '#B21867',\n  '#D028A6',\n  '#F93DF5',\n];\nconst intensityColorsCount = intensityColors.length;\n\nconst sgPolygon = {\n  type: 'Polygon',\n  coordinates: [\n    [\n      [103.56983184814452, 1.1984523335134731],\n      [103.71986389160156, 1.1459349466540576],\n      [104.13459777832031, 1.2763684180848154],\n      [104.0789794921875, 1.3580576343735706],\n      [104.09442901611328, 1.3913503559342686],\n      [104.08344268798828, 1.4260154737416286],\n      [104.04155731201172, 1.4462651532861726],\n      [103.97151947021484, 1.4229265238497912],\n      [103.9368438720703, 1.4304772829308758],\n      [103.89667510986328, 1.4263586901405338],\n      [103.86817932128906, 1.4555318956783565],\n      [103.81153106689452, 1.4788701887242242],\n      [103.75968933105469, 1.4469515799492016],\n      [103.72535705566406, 1.4596504356431457],\n      [103.67523193359375, 1.4308204986633148],\n      [103.65943908691406, 1.4067952740787528],\n      [103.61721038818358, 1.323391529857783],\n      [103.56983184814452, 1.1984523335134731],\n    ],\n  ],\n};\n\nif (window.$map) window.$map.remove();\n\nconst bounds = [lowerLong, lowerLat, upperLong, upperLat];\nconst fitBoundsOptions = () => ({\n  padding: window.innerWidth > 640 && window.innerHeight > 640 ? 120 : 0,\n});\nconst maxZoom = 14;\nconst map = (window.$map = new maplibregl.Map({\n  container: 'map',\n  center,\n  // style: 'mapbox://styles/mapbox/dark-v10?optimize=true',\n  // style: 'mapbox://styles/cheeaun/ck7rpspsa2mwh1imt7s5ual7l',\n  style: `https://api.maptiler.com/maps/aecd4cb7-a35b-4c10-89aa-0f4bd52ed1cb/style.json?key=${MAPTILER_KEY}`,\n  minZoom: 8,\n  maxZoom,\n  renderWorldCopies: false,\n  boxZoom: false,\n  pitchWithRotate: false,\n  dragRotate: false,\n  touchPitch: false,\n  attributionControl: false,\n  bounds,\n  fitBoundsOptions: fitBoundsOptions(),\n}));\nmap.touchZoomRotate.disableRotation();\n\n// Controls\nmap.addControl(\n  new maplibregl.NavigationControl({\n    showCompass: false,\n  }),\n  'top-right',\n);\nmap.addControl(\n  new maplibregl.GeolocateControl({\n    trackUserLocation: true,\n  }),\n  'top-right',\n);\n\nclass SnapBoundaryControl {\n  onAdd(map) {\n    this._map = map;\n    this._container = document.createElement('div');\n    this._container.className = 'maplibregl-ctrl maplibregl-ctrl-group';\n\n    const button = document.createElement('button');\n    button.type = 'button';\n    button.title = 'Snap to boundary';\n    button.innerHTML =\n      '<svg height=\"100%\" width=\"100%\" viewBox=\"0 0 24 24\" fill=\"#333\"><path d=\"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm-7 7H3v4c0 1.1.9 2 2 2h4v-2H5v-4zM5 5h4V3H5c-1.1 0-2 .9-2 2v4h2V5zm14-2h-4v2h4v4h2V5c0-1.1-.9-2-2-2zm0 16h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4z\"/></svg>';\n    button.onclick = (e) => {\n      e.preventDefault();\n      this._container.hidden = true;\n      map.fitBounds(bounds, fitBoundsOptions(), { snap: true });\n    };\n    this._container.appendChild(button);\n\n    this._container.hidden = true;\n    map.on('moveend', (e) => {\n      if (e.snap) return;\n      this._container.hidden = false;\n    });\n\n    return this._container;\n  }\n  onRemove() {\n    this._container.parentNode.removeChild(this._container);\n    this._map = undefined;\n  }\n}\nmap.addControl(new SnapBoundaryControl(), 'top-right');\n\nconst $loader = document.getElementById('loader');\nmap.on('dataloading', (e) => {\n  $loader.hidden = false;\n});\nlet dataDone = null;\nmap.on('data', (e) => {\n  clearTimeout(dataDone);\n  dataDone = setTimeout(() => {\n    $loader.hidden = true;\n  }, 500);\n});\n\nconst $legend = document.getElementById('legend');\nconst $infoButton = document.getElementById('info-button');\nconst $legendClose = document.getElementById('legend-close');\n$infoButton.onclick = (e) => {\n  e.preventDefault();\n  $legend.hidden = !$legend.hidden;\n};\n$legendClose.onclick = (e) => {\n  e.preventDefault();\n  $legend.hidden = true;\n};\n\nconst convertRainID2Time = nanomemoize((id) => {\n  const time = (id.match(/\\d{4}$/) || [''])[0].replace(\n    /(\\d{2})(\\d{2})/,\n    (m, m1, m2) => {\n      let h = parseInt(m1, 10);\n      const ampm = h >= 12 ? 'PM' : 'AM';\n      if (h == 0) h = 12;\n      if (h > 12) h -= 12;\n      return h + ':' + m2 + ' ' + ampm;\n    },\n  );\n  return time;\n});\n\nconst convertX2Lng = nanomemoize((x) =>\n  round(lowerLong + (x / width) * distanceLong, 4),\n);\nconst convertY2Lat = nanomemoize((y) =>\n  round(upperLat - (y / height) * distanceLat, 4),\n);\n\nconst zerosArray = new Array(width * height).fill(0);\nconst convertRadar2Values = nanomemoize(\n  (id, radar) => {\n    const rows = radar.trimEnd().split(/\\n/g);\n    const values = zerosArray.slice();\n    for (let y = 0, l = rows.length; y < l; y++) {\n      const chars = rows[y];\n      for (let x = chars.search(/[^\\s]/), rl = chars.length; x < rl; x++) {\n        const char = chars[x];\n        if (char && char !== ' ') {\n          const intensity = char.charCodeAt() - 33;\n          values[y * width + x] = intensity;\n        }\n      }\n    }\n    return values;\n  },\n  {\n    maxArgs: 1,\n  },\n);\n\n// console.log({ intensityColors });\nconst contour = contours()\n  .size([width, height])\n  // .thresholds(\n  //   intensityColors.map((_, i) => Math.ceil((i / intensityColorsCount) * 100)),\n  //   // .filter((_, i) => i % 2 !== 0),\n  // )\n  .thresholds([4, 10, 20, 30, 40, 50, 60, 70, 80, 85, 90, 95, 97.5])\n  .smooth(false);\nconst convertValues2GeoJSON = nanomemoize(\n  (id, values) => {\n    const results = [];\n    const conValues = contour(values);\n    for (let i = 0, l = conValues.length; i < l; i++) {\n      const { type, value, coordinates } = conValues[i];\n      if (coordinates.length) {\n        results.push({\n          type: 'Feature',\n          properties: { intensity: value, id },\n          geometry: {\n            type,\n            coordinates: coordinates.map((c1) =>\n              c1.map((c2) => {\n                c2.pop(); // Remove last coord\n                return chaikin(c2).map(([x, y]) => [\n                  convertX2Lng(x),\n                  convertY2Lat(y),\n                ]);\n              }),\n            ),\n          },\n        });\n      }\n    }\n    return results;\n  },\n  {\n    maxArgs: 1,\n  },\n);\n\nconst genMidValues = nanomemoize(\n  (id, values1, values2) => {\n    const midValues = [];\n    for (let i = 0, l = values1.length; i < l; i++) {\n      midValues[i] = (values1[i] + values2[i]) / 2;\n    }\n    return midValues;\n  },\n  {\n    maxArgs: 1,\n  },\n);\n\nconst showObservations = () => {\n  fetch('https://api.checkweather.sg/v2/observations')\n    .then((res) => res.json())\n    .then((data) => {\n      // console.log('observations', data);\n      const points = data.map((d) => {\n        const { id, lng, lat, ...props } = d;\n        return point([lng, lat], props, { id });\n      });\n      const pointsCollection = featureCollection(points);\n      map.getSource('observations').setData(pointsCollection);\n    });\n};\n\nconst rafInterval = (fn, delay, immediate = false) => {\n  if (immediate) fn();\n  setTimeout(requestAnimationFrame, delay, () => {\n    fn();\n    rafInterval(fn, delay);\n  });\n};\n\nconst ClipPathSparkline = ({\n  values = [],\n  maxValue = null,\n  smoothIterations = 1,\n  style = {},\n  ...props\n}) => {\n  if (!values.length) return null;\n  const total = values.length - 1;\n  const max = maxValue || Math.max(...values);\n  let path = '';\n  chaikin(\n    values.map((v, i) => {\n      const x = Math.round((i / total) * 100);\n      const y = Math.round((v / max) * 100);\n      return [x, y];\n    }),\n    smoothIterations,\n    false,\n  ).forEach((p, i) => {\n    if (i > 0) path += ',';\n    path += `${p[0]}% ${100 - p[1]}%`;\n  });\n  return (\n    <div\n      {...props}\n      style={{\n        ...style,\n        clipPath: `polygon(0 100%, ${path}, 100% 100%)`,\n      }}\n    />\n  );\n};\n\nconst testRadar = () => {\n  let test = '';\n  for (let i = 0; i < height; i++) {\n    for (let j = 0; j < width; j++) {\n      const intensity = ~~Math.round((j / width) * 100);\n      const c = String.fromCharCode(intensity + 33);\n      test += c;\n    }\n    test += '\\n';\n  }\n  return test;\n};\n\nfunction debounce(fn, wait = 1) {\n  let timeout;\n  return function (...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => fn.call(this, ...args), wait);\n  };\n}\n\nconst styleDataLoaded = new Promise((res) => {\n  map.once('styledata', res);\n});\n\nconst RAINAREA_COUNT = 25;\nconst weatherDB = query(\n  collection(db, 'weather'),\n  orderBy('id', 'desc'),\n  limit(RAINAREA_COUNT),\n);\n\nlet firstLoad = true;\nlet memorySaverMode = false;\nconst Player = () => {\n  const [loading, setLoading] = useState(false);\n  const [index, setIndex] = useRafState(null);\n  const [snapshots, setSnapshots] = useRafState([]);\n  const [playing, setPlaying] = useState(false);\n  const [fwd, setFwd] = useState(false);\n  const [docHidden, setDocHidden] = useState(document.hidden);\n\n  useEffect(() => {\n    document.addEventListener(\n      'visibilitychange',\n      () => {\n        setDocHidden(document.hidden);\n      },\n      false,\n    );\n  }, []);\n\n  const debouncedOnSnapshot = debounce((s) => {\n    // if (TESTING_MODE) s = testSnapshot();\n    if (firstLoad) console.timeEnd('Fetch Snapshots');\n    setLoading(false);\n\n    // memorySaverMode = s.docs.every(\n    //   (d) => d.data().coverage_percentage.all > 90,\n    // );\n    const averageCoverage =\n      s.docs\n        .map((d) => d.data().coverage_percentage.all)\n        .reduce((a, b) => a + b) / s.docs.length;\n    console.log({ averageCoverage });\n    memorySaverMode = averageCoverage > 25;\n\n    const processSnapshots = () => {\n      console.time('Process Snapshots');\n      const shots = [];\n      const geoJSONList = [];\n\n      const docs = s.docs.reverse();\n      docs.forEach((doc, i) => {\n        const rainarea = doc.data();\n        const values = convertRadar2Values(rainarea.id, rainarea.radar);\n        const geojsons = convertValues2GeoJSON(rainarea.id, values);\n        geoJSONList.push(...geojsons);\n\n        const nextDoc = docs[i + 1];\n        if (nextDoc && !memorySaverMode) {\n          const nextRainArea = nextDoc.data();\n          const nextValues = convertRadar2Values(\n            nextRainArea.id,\n            nextRainArea.radar,\n          );\n          const midID = `${\n            (Number(rainarea.id) + Number(nextRainArea.id)) / 2\n          }`;\n          const midValues = genMidValues(midID, values, nextValues);\n          const nextGeojsons = convertValues2GeoJSON(midID, midValues);\n          geoJSONList.push(...nextGeojsons);\n        }\n\n        shots.push(rainarea);\n      });\n\n      const collection = featureCollection(geoJSONList);\n      styleDataLoaded.then(() => {\n        if (!map.getFilter('rainradar')) {\n          map.setFilter('rainradar', ['==', 'id', s.docs[0].data().id], {\n            validate: false,\n          });\n        }\n        map.getSource('rainradar').setData(collection);\n        if (!index) setIndex(shots.length);\n        setSnapshots(shots);\n      });\n      console.timeEnd('Process Snapshots');\n    };\n\n    if (firstLoad) {\n      const firstDoc = s.docs[0].data();\n      // const radar = testRadar();\n      const values = convertRadar2Values(firstDoc.id, firstDoc.radar);\n      const geojsons = convertValues2GeoJSON(firstDoc.id, values);\n      styleDataLoaded.then(() => {\n        map.getSource('rainradar').setData(featureCollection(geojsons));\n        firstLoad = false;\n        map.once('idle', () => requestAnimationFrame(processSnapshots));\n      });\n    } else {\n      processSnapshots();\n    }\n  }, 300);\n\n  useEffect(() => {\n    let unsub = () => {};\n    if (docHidden) {\n      setPlaying(false);\n      firstLoad = false;\n    } else {\n      console.log('Start Snapshots');\n      console.time('Fetch Snapshots');\n      setLoading(true);\n      unsub = onSnapshot(weatherDB, debouncedOnSnapshot);\n    }\n    return () => unsub();\n  }, [docHidden]);\n\n  const snapshotsCount = snapshots.length;\n  if (snapshotsCount <= 1) return null;\n\n  useEffect(() => {\n    if (index && snapshotsCount) {\n      const roundIndex = Math.round(index);\n      const floatIndex = Math.round(index / 0.5) * 0.5;\n\n      const shot = snapshots[roundIndex - 1];\n      let id = shot.id;\n\n      if (floatIndex !== roundIndex && !memorySaverMode) {\n        const floorSnapshot = snapshots[Math.floor(floatIndex) - 1];\n        const ceilSnapshot = snapshots[Math.ceil(floatIndex) - 1];\n        if (floorSnapshot && ceilSnapshot) {\n          const midID = `${(floorSnapshot.dt + ceilSnapshot.dt) / 2}`;\n          id = midID;\n        }\n      }\n\n      setFwd(false);\n      map.setFilter('rainradar', ['==', 'id', id], {\n        validate: false,\n      });\n\n      const faded = index < snapshotsCount - 1;\n      map.setPaintProperty('tempreadings', 'text-opacity', faded ? 0.3 : 1);\n      map.setPaintProperty('humidreadings', 'text-opacity', faded ? 0.3 : 1);\n      map.setPaintProperty('rainreadings', 'text-opacity', faded ? 0.3 : 1);\n      map.setPaintProperty('windirections', 'icon-opacity', faded ? 0.1 : 0.3);\n    }\n  }, [index, snapshots]);\n\n  useEffect(() => {\n    if (index < snapshotsCount && !playing) {\n      setFwd(true);\n    }\n  }, [snapshots]);\n\n  const { id } = snapshots[Math.round(index) - 1];\n  const sgCoveragePercentages = snapshots.map((s) => s.coverage_percentage.sg);\n  const maxSGCoveragePercentage = Math.max(...sgCoveragePercentages);\n\n  useInterval(\n    () => {\n      const endOfSnapshots = index >= snapshotsCount;\n      if (endOfSnapshots && maxSGCoveragePercentage < 5) {\n        setPlaying(false);\n      } else {\n        setIndex(endOfSnapshots ? 1 : index + 0.5);\n      }\n    },\n    playing ? (index === snapshotsCount ? 2000 : 100) : null,\n  );\n\n  const indexPercentage = ((index - 1) / (snapshotsCount - 1)) * 100;\n  const sparklineHeight = 40;\n  const playIconSize = Math.max((maxSGCoveragePercentage / 100) * 24, 16);\n\n  return (\n    <div id=\"player-content\" class={loading ? 'loading' : ''}>\n      <div\n        id=\"player-button\"\n        class={playing ? 'playing' : ''}\n        onClick={() => {\n          if (fwd) {\n            setIndex(snapshotsCount);\n            return;\n          }\n          if (index === snapshotsCount && !playing) setIndex(1);\n          setPlaying(!playing);\n        }}\n      >\n        <div id=\"player-icon\">\n          <svg width={playIconSize} height={playIconSize} viewBox=\"0 0 24 24\">\n            <path\n              d={\n                fwd\n                  ? 'M4 18l8.5-6L4 6v12zm9-12v12l8.5-6L13 6z'\n                  : playing\n                  ? 'M6 19h4V5H6v14zm8-14v14h4V5h-4z'\n                  : 'M8 5v14l11-7z'\n              }\n            />\n          </svg>\n        </div>\n      </div>\n      <div id=\"player-range\">\n        <div\n          id=\"player-time\"\n          class={index === snapshotsCount ? 'now' : ''}\n          style={{\n            left: `${indexPercentage}%`,\n            transform: `translateX(-${indexPercentage}%)`,\n          }}\n        >\n          {convertRainID2Time(id)}\n        </div>\n        <ClipPathSparkline\n          values={sgCoveragePercentages}\n          maxValue={100}\n          smoothIterations={2}\n          style={{ height: sparklineHeight }}\n          id=\"player-sparkline\"\n        />\n        <progress value={index} max={snapshotsCount} />\n        <div id=\"player-labels\">\n          <span>{convertRainID2Time(snapshots[0].id)}</span>\n          <span>\n            {convertRainID2Time(\n              snapshots[Math.round(snapshotsCount / 2) - 1].id,\n            )}\n          </span>\n          <span>{convertRainID2Time(snapshots[snapshotsCount - 1].id)}</span>\n        </div>\n        <input\n          type=\"range\"\n          min=\"1\"\n          max={snapshotsCount}\n          step=\"any\"\n          value={index}\n          onInput={(e) => {\n            setPlaying(false);\n            setIndex(e.target.value);\n          }}\n          onMouseUp={() => setIndex(Math.round(index))}\n          onTouchEnd={(e) => {\n            setIndex(Math.round(index));\n            const touch = e.changedTouches[0];\n            if (touch) {\n              const { width, x } = touch.target.getBoundingClientRect();\n              const padding = 8;\n              const actualWidth = width - padding * 2;\n              const index =\n                ((touch.clientX - padding - x) / actualWidth) *\n                  (snapshotsCount - 1) +\n                1;\n              setIndex(\n                Math.max(1, Math.min(snapshotsCount, Math.round(index))),\n              );\n            }\n          }}\n          onTouchCancel={() => setIndex(Math.round(index))}\n        />\n      </div>\n    </div>\n  );\n};\nrender(<Player />, document.getElementById('player'));\n\n(async () => {\n  await styleDataLoaded;\n\n  // Add sources\n  map.addSource('observations', {\n    type: 'geojson',\n    data: {\n      type: 'FeatureCollection',\n      features: [],\n    },\n    tolerance: 5,\n    buffer: 0,\n    maxzoom: maxZoom,\n  });\n  map.addSource('rainradar', {\n    type: 'geojson',\n    data: {\n      type: 'FeatureCollection',\n      features: [],\n    },\n    maxzoom: maxZoom,\n    // tolerance: 0.5,\n    // buffer: screen.width > 1280 ? 128 : 0,\n  });\n\n  const layers = map.getStyle().layers;\n  // console.log({ layers });\n\n  let labelLayerId;\n  for (let i = 0; i < layers.length; i++) {\n    const { id, type, layout } = layers[i];\n    if (type === 'symbol' && layout['text-field']) {\n      // Find the index of the first symbol layer in the map style\n      if (!labelLayerId) {\n        labelLayerId = layers[i].id;\n      }\n    }\n\n    // Fade out all other labels\n    if (type === 'symbol') {\n      const textOpacity = map.getPaintProperty(id, 'text-opacity');\n      map.setPaintProperty(id, 'text-opacity', [\n        'case',\n        ['within', sgPolygon],\n        textOpacity || 1,\n        0,\n      ]);\n      const iconOpacity = map.getPaintProperty(id, 'icon-opacity');\n      if (typeof iconOpacity === 'number') {\n        map.setPaintProperty(id, 'icon-opacity', [\n          'case',\n          ['within', sgPolygon],\n          iconOpacity || 1,\n          0,\n        ]);\n      }\n    }\n  }\n\n  const radarColors = intensityColors.reduce((acc, color, i) => {\n    const intensity = ((i + 1) / intensityColorsCount) * 100;\n    acc.push(intensity, color);\n    return acc;\n  }, []);\n  const radarFillColor = [\n    'interpolate-lab',\n    ['linear'],\n    ['number', ['get', 'intensity'], 0],\n    0,\n    'transparent',\n    ...radarColors,\n  ];\n\n  // Using fill-extrusion here because\n  // https://github.com/mapbox/mapbox-gl-js/issues/4090#issuecomment-1054711990\n  // Tiles overlap and the opacity overlaps\n  const waterOverlayColor = '#070707';\n  const waterOverlayOpacity = 0.6;\n  const waterPaint = {\n    'fill-extrusion-color': waterOverlayColor,\n    'fill-extrusion-opacity': waterOverlayOpacity,\n    'fill-extrusion-base': 100,\n    'fill-extrusion-height': 101,\n    'fill-extrusion-vertical-gradient': false,\n  };\n  map.addLayer(\n    {\n      id: 'water-overlay',\n      type: 'fill-extrusion',\n      source: 'openmaptiles',\n      'source-layer': 'water',\n      paint: waterPaint,\n    },\n    labelLayerId,\n  );\n\n  map.addLayer(\n    {\n      id: 'rainradar',\n      type: 'fill-extrusion',\n      source: 'rainradar',\n      paint: {\n        'fill-extrusion-vertical-gradient': false,\n        'fill-extrusion-height': ['number', ['get', 'intensity'], 0],\n        'fill-extrusion-color': radarFillColor,\n        'fill-extrusion-opacity': [\n          'interpolate',\n          ['linear'],\n          ['zoom'],\n          8,\n          1,\n          12,\n          0.15,\n        ],\n      },\n    },\n    'water-overlay',\n  );\n\n  // map.addLayer(\n  //   {\n  //     id: 'rainradar',\n  //     type: 'fill',\n  //     source: 'rainradar',\n  //     layout: {\n  //       'fill-sort-key': ['number', ['get', 'intensity'], 0],\n  //     },\n  //     paint: {\n  //       'fill-antialias': false,\n  //       'fill-color': radarFillColor,\n  //       'fill-opacity': [\n  //         'interpolate',\n  //         ['linear'],\n  //         ['zoom'],\n  //         8,\n  //         ['case', ['>', ['number', ['get', 'intensity'], 0], 90], 1, 0.4],\n  //         12,\n  //         0.05,\n  //       ],\n  //     },\n  //   },\n  //   'water-overlay',\n  // );\n\n  map.addLayer({\n    id: 'tempreadings',\n    type: 'symbol',\n    source: 'observations',\n    minzoom: 8.5,\n    filter: ['all', ['has', 'temp_celcius'], ['>', 'temp_celcius', 0]],\n    layout: {\n      'text-field': '{temp_celcius}°',\n      'text-allow-overlap': true,\n      'text-ignore-placement': true,\n      'text-size': ['interpolate', ['linear'], ['zoom'], 8, 10, 14, 28],\n      'text-padding': 1,\n      'text-font': ['Noto Sans Regular'],\n    },\n    paint: {\n      'text-color': 'yellow',\n      'text-halo-color': '#000',\n      'text-halo-width': 1.5,\n    },\n  });\n\n  map.loadImage(arrowPath, (e, image) => {\n    map.addImage('arrow', image);\n  });\n  map.addLayer(\n    {\n      id: 'windirections',\n      type: 'symbol',\n      source: 'observations',\n      filter: ['has', 'wind_direction'],\n      layout: {\n        'icon-image': 'arrow',\n        'icon-rotate': ['get', 'wind_direction'],\n        'icon-allow-overlap': true,\n        'icon-ignore-placement': true,\n        'icon-size': ['interpolate', ['linear'], ['zoom'], 8, 0.05, 14, 0.6],\n      },\n      paint: {\n        'icon-opacity': 0.3,\n      },\n    },\n    'tempreadings',\n  );\n\n  map.addLayer({\n    id: 'humidreadings',\n    type: 'symbol',\n    source: 'observations',\n    minzoom: 10,\n    filter: [\n      'all',\n      ['has', 'relative_humidity'],\n      ['>', 'relative_humidity', 0],\n    ],\n    layout: {\n      'text-field': '{relative_humidity}%',\n      'text-ignore-placement': true,\n      'text-size': ['interpolate', ['linear'], ['zoom'], 8, 8, 14, 14 * 1.1],\n      'text-offset': [0, -1.2],\n      'text-padding': 0,\n      'text-font': ['Noto Sans Regular'],\n    },\n    paint: {\n      'text-color': 'orange',\n      'text-halo-color': '#000',\n      'text-halo-width': 1.5,\n    },\n  });\n\n  map.addLayer({\n    id: 'rainreadings',\n    type: 'symbol',\n    source: 'observations',\n    minzoom: 12,\n    filter: ['all', ['has', 'rain_mm'], ['>', 'rain_mm', 0]],\n    layout: {\n      'text-field': '{rain_mm}mm',\n      'text-size': ['interpolate', ['linear'], ['zoom'], 8, 8, 14, 14 * 1.1],\n      'text-ignore-placement': true,\n      'text-offset': [0, 1.2],\n      'text-padding': 0,\n      'text-font': ['Noto Sans Regular'],\n    },\n    paint: {\n      'text-color': 'aqua',\n      'text-halo-color': '#000',\n      'text-halo-width': 1.5,\n    },\n  });\n\n  rafInterval(showObservations, 2 * 60 * 1000, true); // every 2 mins\n\n  // Mask the area outside Singapore\n  map.addLayer(\n    {\n      id: 'bbox',\n      type: 'fill',\n      source: {\n        type: 'geojson',\n        tolerance: 10,\n        buffer: 0,\n        data: bboxGeoJSON,\n        maxzoom: maxZoom,\n      },\n      paint: {\n        'fill-color': 'rgba(0,0,0,.5)',\n        'fill-antialias': false,\n      },\n    },\n    labelLayerId,\n  );\n})();\n\nconst isSafari = navigator.vendor && navigator.vendor.indexOf('Apple') !== -1;\nif (isSafari) {\n  setTimeout(function () {\n    const ratio = window.devicePixelRatio;\n    const canvas = document.createElement('canvas');\n    const w = (canvas.width = window.screen.width * ratio);\n    const h = (canvas.height = window.screen.height * ratio);\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = '#343332';\n    ctx.fillRect(0, 0, w, h);\n    const icon = new Image();\n    icon.onload = () => {\n      const aspectRatio = icon.width / icon.height;\n      icon.width = w / 2;\n      icon.height = w / 2 / aspectRatio;\n      ctx.drawImage(\n        icon,\n        (w - icon.width) / 2,\n        (h - icon.height) / 2,\n        icon.width,\n        icon.height,\n      );\n      document.head.insertAdjacentHTML(\n        'beforeend',\n        `<link rel=\"apple-touch-startup-image\" href=\"${canvas.toDataURL()}\">`,\n      );\n    };\n    icon.src = iconSVGPath;\n  }, 5000);\n}\n","export default \"__VITE_ASSET__a77103cb__\"","export default \"__VITE_ASSET__05748528__\""],"names":["cut","start","end","ratio","chaikin","pts","iterations","arguments","length","undefined","closed","nCorners","newPts","i","ptA","ptB","newPtA","newPtB","_cut2","push","refined","j","points","concat","jsx","jsxRuntime.jsx","jsxs","jsxRuntime.jsxs","firebaseApp","initializeApp","projectId","db","getFirestore","width","lowerLat","upperLat","lowerLong","upperLong","distanceLong","Math","abs","distanceLat","bboxGeoJSON","polygon","intensityColors","intensityColorsCount","sgPolygon","type","coordinates","window","$map","remove","bounds","fitBoundsOptions","padding","innerWidth","innerHeight","map","maplibregl","Map","container","center","style","MAPTILER_KEY","import","minZoom","maxZoom","renderWorldCopies","boxZoom","pitchWithRotate","dragRotate","touchPitch","attributionControl","touchZoomRotate","disableRotation","addControl","NavigationControl","showCompass","GeolocateControl","trackUserLocation","SnapBoundaryControl","onAdd","_this","this","_map","_container","document","createElement","className","button","title","innerHTML","onclick","e","preventDefault","hidden","fitBounds","snap","appendChild","on","onRemove","parentNode","removeChild","$loader","getElementById","dataDone","clearTimeout","setTimeout","$legend","$infoButton","$legendClose","convertRainID2Time","nanomemoize","id","time","match","replace","m","m1","m2","h","parseInt","ampm","convertX2Lng","x","round","convertY2Lat","y","zerosArray","Array","fill","convertRadar2Values","radar","rows","trimEnd","split","values","slice","l","chars","search","rl","char","intensity","charCodeAt","maxArgs","contour","contours","size","thresholds","smooth","convertValues2GeoJSON","results","conValues","_conValues$i","value","properties","geometry","c1","c2","pop","_ref2","genMidValues","values1","values2","midValues","showObservations","fetch","then","res","json","data","d","lng","lat","props","_excluded","point","pointsCollection","featureCollection","getSource","setData","rafInterval","fn","delay","immediate","requestAnimationFrame","ClipPathSparkline","_ref3","_ref3$values","maxValue","_ref3$maxValue","smoothIterations","_ref3$smoothIteration","_ref3$style","total","max","path","v","forEach","p","_jsx","_objectSpread","clipPath","styleDataLoaded","Promise","once","weatherDB","query","collection","orderBy","limit","firstLoad","memorySaverMode","render","loading","useState","setLoading","_m2","index","useRafState","setIndex","_default3","snapshots","setSnapshots","_default5","playing","setPlaying","_m4","_m6","_slicedToArray","fwd","setFwd","docHidden","setDocHidden","useEffect","addEventListener","debouncedOnSnapshot","timeout","wait","args","_len","_key","call","_this2","debounce","s","console","timeEnd","averageCoverage","docs","coverage_percentage","all","reduce","a","b","log","processSnapshots","shots","geoJSONList","reverse","doc","rainarea","geojsons","nextDoc","nextRainArea","nextValues","midID","Number","nextGeojsons","getFilter","setFilter","validate","firstDoc","unsub","onSnapshot","snapshotsCount","roundIndex","floatIndex","floorSnapshot","floor","ceilSnapshot","ceil","dt","faded","setPaintProperty","sgCoveragePercentages","sg","maxSGCoveragePercentage","useInterval","endOfSnapshots","indexPercentage","playIconSize","_jsxs","class","children","onClick","height","viewBox","left","transform","min","step","onInput","target","onMouseUp","onTouchEnd","touch","changedTouches","getBoundingClientRect","actualWidth","clientX","onTouchCancel","regeneratorRuntime","mark","addSource","features","tolerance","buffer","maxzoom","layers","getStyle","_layers$i","layout","labelLayerId","textOpacity","getPaintProperty","iconOpacity","radarColors","acc","color","radarFillColor","_toConsumableArray","waterPaint","addLayer","source","paint","minzoom","filter","loadImage","image","addImage","navigator","vendor","indexOf","devicePixelRatio","canvas","w","screen","ctx","getContext","fillStyle","fillRect","icon","Image","onload","aspectRatio","drawImage","head","insertAdjacentHTML","toDataURL","src"],"mappings":"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"}