{"version":3,"file":"index-legacy.211b249f.js","sources":["../../utils/chaikin.js","../../preact/jsx-runtime","../../app.jsx","../../assets/arrow-down-white.png","../../icons/icon-standalone.svg"],"sourcesContent":["// 1. https://observablehq.com/@dvreed77/chaikin\n// 2. https://www.npmjs.com/package/chaikin\nfunction cut(start, end, ratio) {\n  const r1 = [\n    start[0] * (1 - ratio) + end[0] * ratio,\n    start[1] * (1 - ratio) + end[1] * ratio,\n  ];\n  const r2 = [\n    start[0] * ratio + end[0] * (1 - ratio),\n    start[1] * ratio + end[1] * (1 - ratio),\n  ];\n  return [r1, r2];\n}\nfunction chaikin(pts, iterations = 1, closed = true, ratio = 0.25) {\n  if (iterations > 10) iterations = 10;\n  if (iterations == 0) return pts;\n\n  if (closed) {\n    const nCorners = pts.length;\n\n    const newPts = [];\n    for (let i = 0; i < nCorners; i++) {\n      const ptA = pts[i];\n      const ptB = pts[(i + 1) % nCorners];\n\n      const [newPtA, newPtB] = cut(ptA, ptB, ratio);\n\n      newPts.push(newPtA, newPtB);\n    }\n\n    return chaikin(newPts, iterations - 1, closed, ratio);\n  } else {\n    if (ratio > 0.5) {\n      ratio = 1 - ratio;\n    }\n\n    for (let i = 0; i < iterations; i++) {\n      let refined = [];\n      refined.push(pts[0]);\n\n      for (let j = 1; j < pts.length; j++) {\n        let points = cut(pts[j - 1], pts[j], ratio);\n        refined = refined.concat(points);\n      }\n\n      if (closed) {\n        refined = refined.concat(cut(pts[pts.length - 1], pts[0], ratio));\n      } else {\n        refined.push(pts[pts.length - 1]);\n      }\n\n      pts = refined;\n    }\n    return pts;\n  }\n}\n\nexport default chaikin;\n","import * as jsxRuntime from \"/home/runner/work/checkweather-sg/checkweather-sg/node_modules/preact/jsx-runtime/dist/jsxRuntime.js\"\nexport const jsx = jsxRuntime.jsx\nexport const jsxs = jsxRuntime.jsxs\nexport const Fragment = jsxRuntime.Fragment","import { render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport useInterval from 'react-use/lib/useInterval';\nimport useRafState from 'react-use/lib/useRafState';\nimport maplibregl from 'maplibre-gl';\nimport { contours } from 'd3-contour';\nimport nanomemoize from 'nano-memoize';\nimport { featureCollection, point, polygon, round } from '@turf/helpers';\n\nconst { VITE_MAPTILER_KEY: MAPTILER_KEY } = import.meta.env;\n\nimport { initializeApp } from 'firebase/app';\nimport {\n  getFirestore,\n  query,\n  collection,\n  orderBy,\n  limit,\n  onSnapshot,\n} from 'firebase/firestore';\n\nimport arrowPath from './assets/arrow-down-white.png';\nimport iconSVGPath from './icons/icon-standalone.svg';\n\nimport chaikin from './utils/chaikin';\n\n// const TESTING_MODE = location.hash === '#test-mode';\n// import testSnapshot from './utils/testSnapshot';\n\n// Initialize Firebase\nconst firebaseApp = initializeApp({\n  projectId: 'check-weather-sg',\n});\nconst db = getFirestore(firebaseApp);\n\nconst width = 217,\n  height = 120;\nconst center = [103.8475, 1.3011];\nconst lowerLat = 1.156,\n  upperLat = 1.475,\n  lowerLong = 103.565,\n  upperLong = 104.13;\nconst distanceLong = Math.abs(upperLong - lowerLong);\nconst distanceLat = Math.abs(upperLat - lowerLat);\n\nconst bboxGeoJSON = polygon([\n  [\n    [-180, 90],\n    [180, 90],\n    [180, -90],\n    [-180, -90],\n    [-180, 90],\n  ],\n  [\n    [lowerLong, upperLat],\n    [upperLong, upperLat],\n    [upperLong, lowerLat],\n    [lowerLong, lowerLat],\n    [lowerLong, upperLat],\n  ],\n]);\n\nconst intensityColors = [\n  '#40FFFD',\n  '#3BEEEC',\n  '#32D0D2',\n  '#2CB9BD',\n  '#229698',\n  '#1C827D',\n  '#1B8742',\n  '#229F44',\n  '#27B240',\n  '#2CC53B',\n  '#30D43E',\n  '#38EF46',\n  '#3BFB49',\n  '#59FA61',\n  '#FEFB63',\n  '#FDFA53',\n  '#FDEB50',\n  '#FDD74A',\n  '#FCC344',\n  '#FAB03F',\n  '#FAA23D',\n  '#FB8938',\n  '#FB7133',\n  '#F94C2D',\n  '#F9282A',\n  '#DD1423',\n  '#BE0F1D',\n  '#B21867',\n  '#D028A6',\n  '#F93DF5',\n];\nconst intensityColorsCount = intensityColors.length;\n\nconst sgPolygon = {\n  type: 'Polygon',\n  coordinates: [\n    [\n      [103.56983184814452, 1.1984523335134731],\n      [103.71986389160156, 1.1459349466540576],\n      [104.13459777832031, 1.2763684180848154],\n      [104.0789794921875, 1.3580576343735706],\n      [104.09442901611328, 1.3913503559342686],\n      [104.08344268798828, 1.4260154737416286],\n      [104.04155731201172, 1.4462651532861726],\n      [103.97151947021484, 1.4229265238497912],\n      [103.9368438720703, 1.4304772829308758],\n      [103.89667510986328, 1.4263586901405338],\n      [103.86817932128906, 1.4555318956783565],\n      [103.81153106689452, 1.4788701887242242],\n      [103.75968933105469, 1.4469515799492016],\n      [103.72535705566406, 1.4596504356431457],\n      [103.67523193359375, 1.4308204986633148],\n      [103.65943908691406, 1.4067952740787528],\n      [103.61721038818358, 1.323391529857783],\n      [103.56983184814452, 1.1984523335134731],\n    ],\n  ],\n};\n\nif (window.$map) window.$map.remove();\n\nconst bounds = [lowerLong, lowerLat, upperLong, upperLat];\nconst fitBoundsOptions = () => ({\n  padding: window.innerWidth > 640 && window.innerHeight > 640 ? 120 : 0,\n});\nconst maxZoom = 14;\nconst map = (window.$map = new maplibregl.Map({\n  container: 'map',\n  center,\n  // style: 'mapbox://styles/mapbox/dark-v10?optimize=true',\n  // style: 'mapbox://styles/cheeaun/ck7rpspsa2mwh1imt7s5ual7l',\n  style: `https://api.maptiler.com/maps/aecd4cb7-a35b-4c10-89aa-0f4bd52ed1cb/style.json?key=${MAPTILER_KEY}`,\n  minZoom: 8,\n  maxZoom,\n  renderWorldCopies: false,\n  boxZoom: false,\n  pitchWithRotate: false,\n  dragRotate: false,\n  touchPitch: false,\n  attributionControl: false,\n  bounds,\n  fitBoundsOptions: fitBoundsOptions(),\n}));\nmap.touchZoomRotate.disableRotation();\n\n// Controls\nmap.addControl(\n  new maplibregl.NavigationControl({\n    showCompass: false,\n  }),\n  'top-right',\n);\nmap.addControl(\n  new maplibregl.GeolocateControl({\n    trackUserLocation: true,\n  }),\n  'top-right',\n);\n\nclass SnapBoundaryControl {\n  onAdd(map) {\n    this._map = map;\n    this._container = document.createElement('div');\n    this._container.className = 'maplibregl-ctrl maplibregl-ctrl-group';\n\n    const button = document.createElement('button');\n    button.type = 'button';\n    button.title = 'Snap to boundary';\n    button.innerHTML =\n      '<svg height=\"100%\" width=\"100%\" viewBox=\"0 0 24 24\" fill=\"#333\"><path d=\"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm-7 7H3v4c0 1.1.9 2 2 2h4v-2H5v-4zM5 5h4V3H5c-1.1 0-2 .9-2 2v4h2V5zm14-2h-4v2h4v4h2V5c0-1.1-.9-2-2-2zm0 16h-4v2h4c1.1 0 2-.9 2-2v-4h-2v4z\"/></svg>';\n    button.onclick = (e) => {\n      e.preventDefault();\n      this._container.hidden = true;\n      map.fitBounds(bounds, fitBoundsOptions(), { snap: true });\n    };\n    this._container.appendChild(button);\n\n    this._container.hidden = true;\n    map.on('moveend', (e) => {\n      if (e.snap) return;\n      this._container.hidden = false;\n    });\n\n    return this._container;\n  }\n  onRemove() {\n    this._container.parentNode.removeChild(this._container);\n    this._map = undefined;\n  }\n}\nmap.addControl(new SnapBoundaryControl(), 'top-right');\n\nconst $loader = document.getElementById('loader');\nmap.on('dataloading', (e) => {\n  $loader.hidden = false;\n});\nlet dataDone = null;\nmap.on('data', (e) => {\n  clearTimeout(dataDone);\n  dataDone = setTimeout(() => {\n    $loader.hidden = true;\n  }, 500);\n});\n\nconst $legend = document.getElementById('legend');\nconst $infoButton = document.getElementById('info-button');\nconst $legendClose = document.getElementById('legend-close');\n$infoButton.onclick = (e) => {\n  e.preventDefault();\n  $legend.hidden = !$legend.hidden;\n};\n$legendClose.onclick = (e) => {\n  e.preventDefault();\n  $legend.hidden = true;\n};\n\nconst convertRainID2Time = nanomemoize((id) => {\n  const time = (id.match(/\\d{4}$/) || [''])[0].replace(\n    /(\\d{2})(\\d{2})/,\n    (m, m1, m2) => {\n      let h = parseInt(m1, 10);\n      const ampm = h >= 12 ? 'PM' : 'AM';\n      if (h == 0) h = 12;\n      if (h > 12) h -= 12;\n      return h + ':' + m2 + ' ' + ampm;\n    },\n  );\n  return time;\n});\n\nconst convertX2Lng = nanomemoize((x) =>\n  round(lowerLong + (x / width) * distanceLong, 4),\n);\nconst convertY2Lat = nanomemoize((y) =>\n  round(upperLat - (y / height) * distanceLat, 4),\n);\n\nconst zerosArray = new Array(width * height).fill(0);\nconst convertRadar2Values = nanomemoize(\n  (id, radar) => {\n    const rows = radar.trimEnd().split(/\\n/g);\n    const values = zerosArray.slice();\n    for (let y = 0, l = rows.length; y < l; y++) {\n      const chars = rows[y];\n      for (let x = chars.search(/[^\\s]/), rl = chars.length; x < rl; x++) {\n        const char = chars[x];\n        if (char && char !== ' ') {\n          const intensity = char.charCodeAt() - 33;\n          values[y * width + x] = intensity;\n        }\n      }\n    }\n    return values;\n  },\n  {\n    maxArgs: 1,\n  },\n);\n\n// console.log({ intensityColors });\nconst contour = contours()\n  .size([width, height])\n  // .thresholds(\n  //   intensityColors.map((_, i) => Math.ceil((i / intensityColorsCount) * 100)),\n  //   // .filter((_, i) => i % 2 !== 0),\n  // )\n  .thresholds([4, 10, 20, 30, 40, 50, 60, 70, 80, 85, 90, 95, 97.5])\n  .smooth(false);\nconst convertValues2GeoJSON = nanomemoize(\n  (id, values) => {\n    const results = [];\n    const conValues = contour(values);\n    for (let i = 0, l = conValues.length; i < l; i++) {\n      const { type, value, coordinates } = conValues[i];\n      if (coordinates.length) {\n        results.push({\n          type: 'Feature',\n          properties: { intensity: value, id },\n          geometry: {\n            type,\n            coordinates: coordinates.map((c1) =>\n              c1.map((c2) => {\n                c2.pop(); // Remove last coord\n                return chaikin(c2).map(([x, y]) => [\n                  convertX2Lng(x),\n                  convertY2Lat(y),\n                ]);\n              }),\n            ),\n          },\n        });\n      }\n    }\n    return results;\n  },\n  {\n    maxArgs: 1,\n  },\n);\n\nconst genMidValues = nanomemoize(\n  (id, values1, values2) => {\n    const midValues = [];\n    for (let i = 0, l = values1.length; i < l; i++) {\n      midValues[i] = (values1[i] + values2[i]) / 2;\n    }\n    return midValues;\n  },\n  {\n    maxArgs: 1,\n  },\n);\n\nconst showObservations = () => {\n  fetch('https://api.checkweather.sg/v2/observations')\n    .then((res) => res.json())\n    .then((data) => {\n      // console.log('observations', data);\n      const points = data.map((d) => {\n        const { id, lng, lat, ...props } = d;\n        return point([lng, lat], props, { id });\n      });\n      const pointsCollection = featureCollection(points);\n      map.getSource('observations').setData(pointsCollection);\n    });\n};\n\nconst rafInterval = (fn, delay, immediate = false) => {\n  if (immediate) fn();\n  setTimeout(requestAnimationFrame, delay, () => {\n    fn();\n    rafInterval(fn, delay);\n  });\n};\n\nconst ClipPathSparkline = ({\n  values = [],\n  maxValue = null,\n  smoothIterations = 1,\n  style = {},\n  ...props\n}) => {\n  if (!values.length) return null;\n  const total = values.length - 1;\n  const max = maxValue || Math.max(...values);\n  let path = '';\n  chaikin(\n    values.map((v, i) => {\n      const x = Math.round((i / total) * 100);\n      const y = Math.round((v / max) * 100);\n      return [x, y];\n    }),\n    smoothIterations,\n    false,\n  ).forEach((p, i) => {\n    if (i > 0) path += ',';\n    path += `${p[0]}% ${100 - p[1]}%`;\n  });\n  return (\n    <div\n      {...props}\n      style={{\n        ...style,\n        clipPath: `polygon(0 100%, ${path}, 100% 100%)`,\n      }}\n    />\n  );\n};\n\nconst testRadar = () => {\n  let test = '';\n  for (let i = 0; i < height; i++) {\n    for (let j = 0; j < width; j++) {\n      const intensity = ~~Math.round((j / width) * 100);\n      const c = String.fromCharCode(intensity + 33);\n      test += c;\n    }\n    test += '\\n';\n  }\n  return test;\n};\n\nfunction debounce(fn, wait = 1) {\n  let timeout;\n  return function (...args) {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => fn.call(this, ...args), wait);\n  };\n}\n\nconst styleDataLoaded = new Promise((res) => {\n  map.once('styledata', res);\n});\n\nconst RAINAREA_COUNT = 25;\nconst weatherDB = query(\n  collection(db, 'weather'),\n  orderBy('id', 'desc'),\n  limit(RAINAREA_COUNT),\n);\n\nlet firstLoad = true;\nlet memorySaverMode = false;\nconst Player = () => {\n  const [loading, setLoading] = useState(false);\n  const [index, setIndex] = useRafState(null);\n  const [snapshots, setSnapshots] = useRafState([]);\n  const [playing, setPlaying] = useState(false);\n  const [fwd, setFwd] = useState(false);\n  const [docHidden, setDocHidden] = useState(document.hidden);\n\n  useEffect(() => {\n    document.addEventListener(\n      'visibilitychange',\n      () => {\n        setDocHidden(document.hidden);\n      },\n      false,\n    );\n  }, []);\n\n  const debouncedOnSnapshot = debounce((s) => {\n    // if (TESTING_MODE) s = testSnapshot();\n    if (firstLoad) console.timeEnd('Fetch Snapshots');\n    setLoading(false);\n\n    // memorySaverMode = s.docs.every(\n    //   (d) => d.data().coverage_percentage.all > 90,\n    // );\n    const averageCoverage =\n      s.docs\n        .map((d) => d.data().coverage_percentage.all)\n        .reduce((a, b) => a + b) / s.docs.length;\n    console.log({ averageCoverage });\n    memorySaverMode = averageCoverage > 25;\n\n    const processSnapshots = () => {\n      console.time('Process Snapshots');\n      const shots = [];\n      const geoJSONList = [];\n\n      const docs = s.docs.reverse();\n      docs.forEach((doc, i) => {\n        const rainarea = doc.data();\n        const values = convertRadar2Values(rainarea.id, rainarea.radar);\n        const geojsons = convertValues2GeoJSON(rainarea.id, values);\n        geoJSONList.push(...geojsons);\n\n        const nextDoc = docs[i + 1];\n        if (nextDoc && !memorySaverMode) {\n          const nextRainArea = nextDoc.data();\n          const nextValues = convertRadar2Values(\n            nextRainArea.id,\n            nextRainArea.radar,\n          );\n          const midID = `${\n            (Number(rainarea.id) + Number(nextRainArea.id)) / 2\n          }`;\n          const midValues = genMidValues(midID, values, nextValues);\n          const nextGeojsons = convertValues2GeoJSON(midID, midValues);\n          geoJSONList.push(...nextGeojsons);\n        }\n\n        shots.push(rainarea);\n      });\n\n      const collection = featureCollection(geoJSONList);\n      styleDataLoaded.then(() => {\n        if (!map.getFilter('rainradar')) {\n          map.setFilter('rainradar', ['==', 'id', s.docs[0].data().id], {\n            validate: false,\n          });\n        }\n        map.getSource('rainradar').setData(collection);\n        if (!index) setIndex(shots.length);\n        setSnapshots(shots);\n      });\n      console.timeEnd('Process Snapshots');\n    };\n\n    if (firstLoad) {\n      const firstDoc = s.docs[0].data();\n      // const radar = testRadar();\n      const values = convertRadar2Values(firstDoc.id, firstDoc.radar);\n      const geojsons = convertValues2GeoJSON(firstDoc.id, values);\n      styleDataLoaded.then(() => {\n        map.getSource('rainradar').setData(featureCollection(geojsons));\n        firstLoad = false;\n        map.once('idle', () => requestAnimationFrame(processSnapshots));\n      });\n    } else {\n      processSnapshots();\n    }\n  }, 300);\n\n  useEffect(() => {\n    let unsub = () => {};\n    if (docHidden) {\n      setPlaying(false);\n      firstLoad = false;\n    } else {\n      console.log('Start Snapshots');\n      console.time('Fetch Snapshots');\n      setLoading(true);\n      unsub = onSnapshot(weatherDB, debouncedOnSnapshot);\n    }\n    return () => unsub();\n  }, [docHidden]);\n\n  const snapshotsCount = snapshots.length;\n  if (snapshotsCount <= 1) return null;\n\n  useEffect(() => {\n    if (index && snapshotsCount) {\n      const roundIndex = Math.round(index);\n      const floatIndex = Math.round(index / 0.5) * 0.5;\n\n      const shot = snapshots[roundIndex - 1];\n      let id = shot.id;\n\n      if (floatIndex !== roundIndex && !memorySaverMode) {\n        const floorSnapshot = snapshots[Math.floor(floatIndex) - 1];\n        const ceilSnapshot = snapshots[Math.ceil(floatIndex) - 1];\n        if (floorSnapshot && ceilSnapshot) {\n          const midID = `${(floorSnapshot.dt + ceilSnapshot.dt) / 2}`;\n          id = midID;\n        }\n      }\n\n      setFwd(false);\n      map.setFilter('rainradar', ['==', 'id', id], {\n        validate: false,\n      });\n\n      const faded = index < snapshotsCount - 1;\n      map.setPaintProperty('tempreadings', 'text-opacity', faded ? 0.3 : 1);\n      map.setPaintProperty('humidreadings', 'text-opacity', faded ? 0.3 : 1);\n      map.setPaintProperty('rainreadings', 'text-opacity', faded ? 0.3 : 1);\n      map.setPaintProperty('windirections', 'icon-opacity', faded ? 0.1 : 0.3);\n    }\n  }, [index, snapshots]);\n\n  useEffect(() => {\n    if (index < snapshotsCount && !playing) {\n      setFwd(true);\n    }\n  }, [snapshots]);\n\n  const { id } = snapshots[Math.round(index) - 1];\n  const sgCoveragePercentages = snapshots.map((s) => s.coverage_percentage.sg);\n  const maxSGCoveragePercentage = Math.max(...sgCoveragePercentages);\n\n  useInterval(\n    () => {\n      const endOfSnapshots = index >= snapshotsCount;\n      if (endOfSnapshots && maxSGCoveragePercentage < 5) {\n        setPlaying(false);\n      } else {\n        setIndex(endOfSnapshots ? 1 : index + 0.5);\n      }\n    },\n    playing ? (index === snapshotsCount ? 2000 : 100) : null,\n  );\n\n  const indexPercentage = ((index - 1) / (snapshotsCount - 1)) * 100;\n  const sparklineHeight = 40;\n  const playIconSize = Math.max((maxSGCoveragePercentage / 100) * 24, 16);\n\n  return (\n    <div id=\"player-content\" class={loading ? 'loading' : ''}>\n      <div\n        id=\"player-button\"\n        class={playing ? 'playing' : ''}\n        onClick={() => {\n          if (fwd) {\n            setIndex(snapshotsCount);\n            return;\n          }\n          if (index === snapshotsCount && !playing) setIndex(1);\n          setPlaying(!playing);\n        }}\n      >\n        <div id=\"player-icon\">\n          <svg width={playIconSize} height={playIconSize} viewBox=\"0 0 24 24\">\n            <path\n              d={\n                fwd\n                  ? 'M4 18l8.5-6L4 6v12zm9-12v12l8.5-6L13 6z'\n                  : playing\n                  ? 'M6 19h4V5H6v14zm8-14v14h4V5h-4z'\n                  : 'M8 5v14l11-7z'\n              }\n            />\n          </svg>\n        </div>\n      </div>\n      <div id=\"player-range\">\n        <div\n          id=\"player-time\"\n          class={index === snapshotsCount ? 'now' : ''}\n          style={{\n            left: `${indexPercentage}%`,\n            transform: `translateX(-${indexPercentage}%)`,\n          }}\n        >\n          {convertRainID2Time(id)}\n        </div>\n        <ClipPathSparkline\n          values={sgCoveragePercentages}\n          maxValue={100}\n          smoothIterations={2}\n          style={{ height: sparklineHeight }}\n          id=\"player-sparkline\"\n        />\n        <progress value={index} max={snapshotsCount} />\n        <div id=\"player-labels\">\n          <span>{convertRainID2Time(snapshots[0].id)}</span>\n          <span>\n            {convertRainID2Time(\n              snapshots[Math.round(snapshotsCount / 2) - 1].id,\n            )}\n          </span>\n          <span>{convertRainID2Time(snapshots[snapshotsCount - 1].id)}</span>\n        </div>\n        <input\n          type=\"range\"\n          min=\"1\"\n          max={snapshotsCount}\n          step=\"any\"\n          value={index}\n          onInput={(e) => {\n            setPlaying(false);\n            setIndex(e.target.value);\n          }}\n          onMouseUp={() => setIndex(Math.round(index))}\n          onTouchEnd={(e) => {\n            setIndex(Math.round(index));\n            const touch = e.changedTouches[0];\n            if (touch) {\n              const { width, x } = touch.target.getBoundingClientRect();\n              const padding = 8;\n              const actualWidth = width - padding * 2;\n              const index =\n                ((touch.clientX - padding - x) / actualWidth) *\n                  (snapshotsCount - 1) +\n                1;\n              setIndex(\n                Math.max(1, Math.min(snapshotsCount, Math.round(index))),\n              );\n            }\n          }}\n          onTouchCancel={() => setIndex(Math.round(index))}\n        />\n      </div>\n    </div>\n  );\n};\nrender(<Player />, document.getElementById('player'));\n\n(async () => {\n  await styleDataLoaded;\n\n  // Add sources\n  map.addSource('observations', {\n    type: 'geojson',\n    data: {\n      type: 'FeatureCollection',\n      features: [],\n    },\n    tolerance: 5,\n    buffer: 0,\n    maxzoom: maxZoom,\n  });\n  map.addSource('rainradar', {\n    type: 'geojson',\n    data: {\n      type: 'FeatureCollection',\n      features: [],\n    },\n    maxzoom: maxZoom,\n    // tolerance: 0.5,\n    // buffer: screen.width > 1280 ? 128 : 0,\n  });\n\n  const layers = map.getStyle().layers;\n  // console.log({ layers });\n\n  let labelLayerId;\n  for (let i = 0; i < layers.length; i++) {\n    const { id, type, layout } = layers[i];\n    if (type === 'symbol' && layout['text-field']) {\n      // Find the index of the first symbol layer in the map style\n      if (!labelLayerId) {\n        labelLayerId = layers[i].id;\n      }\n    }\n\n    // Fade out all other labels\n    if (type === 'symbol') {\n      const textOpacity = map.getPaintProperty(id, 'text-opacity');\n      map.setPaintProperty(id, 'text-opacity', [\n        'case',\n        ['within', sgPolygon],\n        textOpacity || 1,\n        0,\n      ]);\n      const iconOpacity = map.getPaintProperty(id, 'icon-opacity');\n      if (typeof iconOpacity === 'number') {\n        map.setPaintProperty(id, 'icon-opacity', [\n          'case',\n          ['within', sgPolygon],\n          iconOpacity || 1,\n          0,\n        ]);\n      }\n    }\n  }\n\n  const radarColors = intensityColors.reduce((acc, color, i) => {\n    const intensity = ((i + 1) / intensityColorsCount) * 100;\n    acc.push(intensity, color);\n    return acc;\n  }, []);\n  const radarFillColor = [\n    'interpolate-lab',\n    ['linear'],\n    ['number', ['get', 'intensity'], 0],\n    0,\n    'transparent',\n    ...radarColors,\n  ];\n\n  // Using fill-extrusion here because\n  // https://github.com/mapbox/mapbox-gl-js/issues/4090#issuecomment-1054711990\n  // Tiles overlap and the opacity overlaps\n  const waterOverlayColor = '#070707';\n  const waterOverlayOpacity = 0.6;\n  const waterPaint = {\n    'fill-extrusion-color': waterOverlayColor,\n    'fill-extrusion-opacity': waterOverlayOpacity,\n    'fill-extrusion-base': 100,\n    'fill-extrusion-height': 101,\n    'fill-extrusion-vertical-gradient': false,\n  };\n  map.addLayer(\n    {\n      id: 'water-overlay',\n      type: 'fill-extrusion',\n      source: 'openmaptiles',\n      'source-layer': 'water',\n      paint: waterPaint,\n    },\n    labelLayerId,\n  );\n\n  map.addLayer(\n    {\n      id: 'rainradar',\n      type: 'fill-extrusion',\n      source: 'rainradar',\n      paint: {\n        'fill-extrusion-vertical-gradient': false,\n        'fill-extrusion-height': ['number', ['get', 'intensity'], 0],\n        'fill-extrusion-color': radarFillColor,\n        'fill-extrusion-opacity': [\n          'interpolate',\n          ['linear'],\n          ['zoom'],\n          8,\n          1,\n          12,\n          0.15,\n        ],\n      },\n    },\n    'water-overlay',\n  );\n\n  // map.addLayer(\n  //   {\n  //     id: 'rainradar',\n  //     type: 'fill',\n  //     source: 'rainradar',\n  //     layout: {\n  //       'fill-sort-key': ['number', ['get', 'intensity'], 0],\n  //     },\n  //     paint: {\n  //       'fill-antialias': false,\n  //       'fill-color': radarFillColor,\n  //       'fill-opacity': [\n  //         'interpolate',\n  //         ['linear'],\n  //         ['zoom'],\n  //         8,\n  //         ['case', ['>', ['number', ['get', 'intensity'], 0], 90], 1, 0.4],\n  //         12,\n  //         0.05,\n  //       ],\n  //     },\n  //   },\n  //   'water-overlay',\n  // );\n\n  map.addLayer({\n    id: 'tempreadings',\n    type: 'symbol',\n    source: 'observations',\n    minzoom: 8.5,\n    filter: ['all', ['has', 'temp_celcius'], ['>', 'temp_celcius', 0]],\n    layout: {\n      'text-field': '{temp_celcius}°',\n      'text-allow-overlap': true,\n      'text-ignore-placement': true,\n      'text-size': ['interpolate', ['linear'], ['zoom'], 8, 10, 14, 28],\n      'text-padding': 1,\n      'text-font': ['Noto Sans Regular'],\n    },\n    paint: {\n      'text-color': 'yellow',\n      'text-halo-color': '#000',\n      'text-halo-width': 1.5,\n    },\n  });\n\n  map.loadImage(arrowPath, (e, image) => {\n    map.addImage('arrow', image);\n  });\n  map.addLayer(\n    {\n      id: 'windirections',\n      type: 'symbol',\n      source: 'observations',\n      filter: ['has', 'wind_direction'],\n      layout: {\n        'icon-image': 'arrow',\n        'icon-rotate': ['get', 'wind_direction'],\n        'icon-allow-overlap': true,\n        'icon-ignore-placement': true,\n        'icon-size': ['interpolate', ['linear'], ['zoom'], 8, 0.05, 14, 0.6],\n      },\n      paint: {\n        'icon-opacity': 0.3,\n      },\n    },\n    'tempreadings',\n  );\n\n  map.addLayer({\n    id: 'humidreadings',\n    type: 'symbol',\n    source: 'observations',\n    minzoom: 10,\n    filter: [\n      'all',\n      ['has', 'relative_humidity'],\n      ['>', 'relative_humidity', 0],\n    ],\n    layout: {\n      'text-field': '{relative_humidity}%',\n      'text-ignore-placement': true,\n      'text-size': ['interpolate', ['linear'], ['zoom'], 8, 8, 14, 14 * 1.1],\n      'text-offset': [0, -1.2],\n      'text-padding': 0,\n      'text-font': ['Noto Sans Regular'],\n    },\n    paint: {\n      'text-color': 'orange',\n      'text-halo-color': '#000',\n      'text-halo-width': 1.5,\n    },\n  });\n\n  map.addLayer({\n    id: 'rainreadings',\n    type: 'symbol',\n    source: 'observations',\n    minzoom: 12,\n    filter: ['all', ['has', 'rain_mm'], ['>', 'rain_mm', 0]],\n    layout: {\n      'text-field': '{rain_mm}mm',\n      'text-size': ['interpolate', ['linear'], ['zoom'], 8, 8, 14, 14 * 1.1],\n      'text-ignore-placement': true,\n      'text-offset': [0, 1.2],\n      'text-padding': 0,\n      'text-font': ['Noto Sans Regular'],\n    },\n    paint: {\n      'text-color': 'aqua',\n      'text-halo-color': '#000',\n      'text-halo-width': 1.5,\n    },\n  });\n\n  rafInterval(showObservations, 2 * 60 * 1000, true); // every 2 mins\n\n  // Mask the area outside Singapore\n  map.addLayer(\n    {\n      id: 'bbox',\n      type: 'fill',\n      source: {\n        type: 'geojson',\n        tolerance: 10,\n        buffer: 0,\n        data: bboxGeoJSON,\n        maxzoom: maxZoom,\n      },\n      paint: {\n        'fill-color': 'rgba(0,0,0,.5)',\n        'fill-antialias': false,\n      },\n    },\n    labelLayerId,\n  );\n})();\n\nconst isSafari = navigator.vendor && navigator.vendor.indexOf('Apple') !== -1;\nif (isSafari) {\n  setTimeout(function () {\n    const ratio = window.devicePixelRatio;\n    const canvas = document.createElement('canvas');\n    const w = (canvas.width = window.screen.width * ratio);\n    const h = (canvas.height = window.screen.height * ratio);\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = '#343332';\n    ctx.fillRect(0, 0, w, h);\n    const icon = new Image();\n    icon.onload = () => {\n      const aspectRatio = icon.width / icon.height;\n      icon.width = w / 2;\n      icon.height = w / 2 / aspectRatio;\n      ctx.drawImage(\n        icon,\n        (w - icon.width) / 2,\n        (h - icon.height) / 2,\n        icon.width,\n        icon.height,\n      );\n      document.head.insertAdjacentHTML(\n        'beforeend',\n        `<link rel=\"apple-touch-startup-image\" href=\"${canvas.toDataURL()}\">`,\n      );\n    };\n    icon.src = iconSVGPath;\n  }, 5000);\n}\n","export default \"__VITE_ASSET__a77103cb__\"","export default \"__VITE_ASSET__05748528__\""],"names":["cut","start","end","ratio","chaikin","pts","iterations","arguments","length","undefined","closed","nCorners","newPts","i","ptA","ptB","_cut2","_slicedToArray","_cut","newPtA","newPtB","push","refined","j","concat","points","jsx","jsxRuntime.jsx","jsxs","jsxRuntime.jsxs","initializeApp","projectId","db","getFirestore","firebaseApp","width","upperLat","lowerLong","upperLong","distanceLong","Math","abs","distanceLat","lowerLat","bboxGeoJSON","polygon","intensityColors","sgPolygon","type","coordinates","window","$map","remove","bounds","fitBoundsOptions","padding","innerWidth","innerHeight","Map","container","center","style","import","minZoom","maxZoom","renderWorldCopies","boxZoom","pitchWithRotate","dragRotate","touchPitch","attributionControl","map","touchZoomRotate","disableRotation","addControl","maplibregl","NavigationControl","showCompass","GeolocateControl","trackUserLocation","onAdd","_this","this","_map","_container","document","createElement","className","button","title","innerHTML","onclick","e","preventDefault","hidden","fitBounds","snap","appendChild","on","onRemove","parentNode","removeChild","SnapBoundaryControl","$loader","getElementById","clearTimeout","dataDone","setTimeout","$legend","$infoButton","$legendClose","convertRainID2Time","nanomemoize","id","time","match","replace","m","m1","m2","h","parseInt","ampm","convertX2Lng","x","round","convertY2Lat","y","Array","fill","convertRadar2Values","radar","trimEnd","split","values","zerosArray","slice","l","rows","chars","search","rl","char","intensity","charCodeAt","maxArgs","contour","contours","size","thresholds","smooth","results","conValues","value","_conValues$i","properties","geometry","c1","c2","pop","_ref","_ref2","values1","values2","midValues","fetch","then","res","json","data","d","lng","lat","props","_excluded","pointsCollection","featureCollection","getSource","setData","rafInterval","fn","delay","immediate","requestAnimationFrame","ClipPathSparkline","_ref3","_ref3$values","maxValue","_ref3$maxValue","_ref3$smoothIteration","smoothIterations","_ref3$style","_objectWithoutProperties","_excluded2","total","max","path","v","forEach","p","_jsx","_objectSpread","clipPath","styleDataLoaded","Promise","once","weatherDB","query","collection","orderBy","limit","firstLoad","memorySaverMode","render","useState","loading","_m2","setLoading","index","useRafState","setIndex","snapshots","setSnapshots","_default5","_m4","playing","setPlaying","fwd","setFwd","_m6","docHidden","setDocHidden","useEffect","addEventListener","debouncedOnSnapshot","wait","timeout","_this2","_len","args","call","debounce","s","console","timeEnd","docs","coverage_percentage","all","reduce","a","b","log","averageCoverage","processSnapshots","reverse","doc","rainarea","convertValues2GeoJSON","geojsons","nextDoc","nextRainArea","midID","Number","genMidValues","nextValues","nextGeojsons","shots","geoJSONList","getFilter","setFilter","validate","firstDoc","onSnapshot","unsub","snapshotsCount","roundIndex","floatIndex","floor","ceil","floorSnapshot","ceilSnapshot","dt","faded","setPaintProperty","sg","sgCoveragePercentages","useInterval","endOfSnapshots","maxSGCoveragePercentage","class","children","onClick","playIconSize","height","viewBox","_jsxs","left","indexPercentage","transform","min","step","onInput","target","onMouseUp","onTouchEnd","touch","changedTouches","_touch$target$getBoun","getBoundingClientRect","actualWidth","clientX","onTouchCancel","addSource","features","tolerance","buffer","maxzoom","layers","getStyle","layout","_layers$i","labelLayerId","textOpacity","getPaintProperty","iconOpacity","radarColors","acc","color","intensityColorsCount","radarFillColor","waterPaint","addLayer","source","paint","minzoom","filter","loadImage","image","addImage","showObservations","_context","stop","_callee","navigator","vendor","indexOf","devicePixelRatio","canvas","screen","ctx","getContext","fillStyle","fillRect","w","icon","onload","aspectRatio","drawImage","head","insertAdjacentHTML","toDataURL","src"],"mappings":"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"}