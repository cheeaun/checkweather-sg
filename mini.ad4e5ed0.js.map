{"version":3,"sources":["mini/mini.js"],"names":["$rain","document","getElementById","$obs","$datetime","HOST","lowerLat","upperLat","lowerLong","upperLong","longRange","latRange","calcPos","long","lat","x","y","timeID","id","match","replace","m","m1","m2","h","parseInt","ampm","nowID","showRain","fetch","Date","then","res","text","innerHTML","path","setAttributeNS","classList","remove","setTimeout","requestAnimationFrame","onload","add","onerror","showObservations","json","body","features","forEach","f","coordinates","geometry","pos","properties","temp_celcius","wind_direction","insertAdjacentHTML"],"mappings":";;;AA+EgB,aAvEhB,IAAA,EAAA,QAAA,4BAuEgB,EAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA/EhB,IAAMA,EAAQC,SAASC,eAAe,QAChCC,EAAOF,SAASC,eAAe,OAC/BE,EAAYH,SAASC,eAAe,YACpCG,EAAO,8BACPC,EAAW,MAAOC,EAAW,MAAOC,EAAY,QAASC,EAAY,OACrEC,EAAYD,EAAYD,EACxBG,EAAWJ,EAAWD,EAItBM,EAAU,SAACC,EAAMC,GAGd,MAAA,CACLC,GAAIF,EAAOL,GAAaE,EAAY,IACpCM,GAAIT,EAAWO,GAAOH,EAAW,MAI/BM,EAAS,SAACC,GAAO,OAACA,EAAGC,MAAM,WAAa,CAAC,KAAK,GAAGC,QAAQ,iBAAkB,SAACC,EAAGC,EAAIC,GACnFC,IAAAA,EAAIC,SAASH,EAAI,IACfI,EAAOF,GAAK,GAAK,KAAO,KAGvBA,OAFE,GAALA,IAAQA,EAAI,IACZA,EAAI,KAAIA,GAAK,IACVA,EAAI,IAAMD,EAAK,IAAMG,KAG1BC,OAAJ,EACMC,EAAW,SAAXA,IACJC,MAAMxB,EAAO,WAAasB,EAAQ,GAAK,MAAQ,IAAIG,OAAUC,KAAK,SAAAC,GAAOA,OAAAA,EAAIC,SAAQF,KAAK,SAAAb,GACpFS,GAAAA,IAAUT,EAAVS,CAIJA,EAAQT,EACRd,EAAU8B,UAAY,GAEhBC,IAAAA,EAAuEjB,gEAAAA,EAA7E,oBAGAlB,EAAMoC,eAAe,+BAAgC,OAAQD,GAC7DnC,EAAMqC,UAAUC,OAAO,UACvBC,WAAW,WACTnC,EAAU8B,UAAYjB,EAAOC,IAC5B,KACHqB,WAAWC,sBAAuB,IAAWZ,QAd3CW,WAAWC,sBAAuB,IAAWZ,MAiBnD5B,EAAMyC,OAAS,WACbF,WAAW,WACTvC,EAAMqC,UAAUK,IAAI,WACnB,MAIL1C,EAAM2C,QAAU,WACdhB,EAAQ,KACRY,WAAWC,sBAAuB,IAAMZ,IAG1C,IAAMgB,EAAmB,SAAnBA,IACJf,MAAMxB,EAAO,2BAA6BsB,EAAQ,GAAK,MAAQ,IAAIG,OAAUC,KAAK,SAAAC,GAAOA,OAAAA,EAAIa,SAAQd,KAAK,SAAAe,GACxG3C,EAAK+B,UAAY,GACjBY,EAAKC,SAASC,QAAQ,SAAAC,GACZC,IAAAA,EAAgBD,EAAEE,SAAlBD,YACFE,EAAMxC,EAAQsC,EAAY,GAAIA,EAAY,IACPD,EAAAA,EAAEI,WAAnCC,EAAAA,EAAAA,aAAcC,EAAAA,EAAAA,eAClBD,GACFnD,EAAKqD,mBAAmB,YAAmCJ,sBAAAA,EAAIrC,EAASqC,QAAAA,EAAIpC,EAAMsC,KAAAA,EAAlF,YAEEC,GACFpD,EAAKqD,mBAAmB,aAAmDJ,sCAAAA,EAAIrC,EAAE,IAAUqC,SAAAA,EAAIpC,EAAE,IAAyBuC,uBAAAA,EAAmBH,KAAAA,EAAIrC,EAAMqC,KAAAA,EAAIpC,EAA3J,UAGJuB,WAAWC,sBAAuB,KAAeI,MAIrDhB,IACAgB","file":"mini.ad4e5ed0.js","sourceRoot":"..","sourcesContent":["const $rain = document.getElementById('rain');\nconst $obs = document.getElementById('obs');\nconst $datetime = document.getElementById('datetime');\nconst HOST = 'https://api.checkweather.sg';\nconst lowerLat = 1.156, upperLat = 1.475, lowerLong = 103.565, upperLong = 104.130;\nconst longRange = upperLong - lowerLong;\nconst latRange = upperLat - lowerLat;\n\nimport arrowDown from '../assets/arrow-down.svg';\n\nconst calcPos = (long, lat) => {\n  // Note: These are inaccurate measurements.\n  // Maybe only works for Singapore since it's small.\n  return {\n    x: (long - lowerLong) / longRange * 400,\n    y: (upperLat - lat) / latRange * 226,\n  };\n};\n\nconst timeID = (id) => (id.match(/\\d{4}$/) || [''])[0].replace(/(\\d{2})(\\d{2})/, (m, m1, m2) => {\n  let h = parseInt(m1, 10);\n  const ampm = h >= 12 ? 'PM' : 'AM';\n  if (h == 0) h = 12;\n  if (h > 12) h -= 12;\n  return h + ':' + m2 + ' ' + ampm;\n});\n\nlet nowID;\nconst showRain = () => {\n  fetch(HOST + '/now-id' + (nowID ? '' : '?' + (+new Date()))).then(res => res.text()).then(id => {\n    if (nowID === id){\n      setTimeout(requestAnimationFrame, 60 * 1000, showRain); // every min\n      return;\n    }\n    nowID = id;\n    $datetime.innerHTML = '';\n    // const path = 'https://www.weather.gov.sg/files/rainarea/50km/v2/dpsri_70km_2019021805500000dBR.dpsri.png' + '?' + (+new Date());\n    const path = `https://www.weather.gov.sg/files/rainarea/50km/v2/dpsri_70km_${id}0000dBR.dpsri.png`;\n    // $rain.setAttribute('href', path);\n    // $rain.setAttribute('xlink:href', path);\n    $rain.setAttributeNS('http://www.w3.org/1999/xlink', 'href', path);\n    $rain.classList.remove('loaded');\n    setTimeout(() => {\n      $datetime.innerHTML = timeID(id);\n    }, 1000);\n    setTimeout(requestAnimationFrame, 60 * 1000, showRain); // every min\n  });\n}\n$rain.onload = () => {\n  setTimeout(() => {\n    $rain.classList.add('loaded');\n  }, 2000);\n  // setTimeout(requestAnimationFrame, 60 * 1000, showRain); // every min\n  // $datetime.visiblity = '';\n};\n$rain.onerror = () => {\n  nowID = null;\n  setTimeout(requestAnimationFrame, 1000, showRain);\n};\n\nconst showObservations = () => {\n  fetch(HOST + '/observations?compact=1' + (nowID ? '' : '&' + (+new Date()))).then(res => res.json()).then(body => {\n    $obs.innerHTML = '';\n    body.features.forEach(f => {\n      const { coordinates } = f.geometry;\n      const pos = calcPos(coordinates[0], coordinates[1]);\n      const { temp_celcius, wind_direction } = f.properties;\n      if (temp_celcius) {\n        $obs.insertAdjacentHTML('beforeend', `<text class=\"t\" x=\"${pos.x}\" y=\"${pos.y}\">${temp_celcius}Â°</text>`);\n      }\n      if (wind_direction) {\n        $obs.insertAdjacentHTML('afterbegin', `<use xlink:href=\"#w\" class=\"w\" x=\"${pos.x-20}\" y=\"${pos.y-20}\" transform=\"rotate(${wind_direction}, ${pos.x}, ${pos.y})\"/>`);\n      }\n    });\n    setTimeout(requestAnimationFrame, 2 * 60 * 1000, showObservations); // every 2 mins\n  });\n}\n\nshowRain();\nshowObservations();"]}