{"version":3,"sources":["mini/mini.js"],"names":["$rain","document","getElementById","$obs","$datetime","HOST","lowerLat","upperLat","lowerLong","upperLong","longRange","latRange","calcPos","long","lat","x","y","timeID","id","match","replace","m","m1","m2","h","parseInt","ampm","nowID","showRain","fetch","then","res","text","visiblity","path","setAttribute","innerHTML","setTimeout","requestAnimationFrame","onload","onerror","showObservations","json","body","features","forEach","f","coordinates","geometry","pos","properties","temp_celcius","wind_direction","insertAdjacentHTML","arrowDown"],"mappings":";;;AAuFA,aA/EA,IAAA,EAAA,QAAA,4BA+EA,EAAA,EAAA,GAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAvFA,IAAMA,EAAQC,SAASC,eAAe,QAChCC,EAAOF,SAASC,eAAe,OAC/BE,EAAYH,SAASC,eAAe,YACpCG,EAAO,8BACPC,EAAW,MAAOC,EAAW,MAAOC,EAAY,QAASC,EAAY,OACrEC,EAAYD,EAAYD,EACxBG,EAAWJ,EAAWD,EAItBM,EAAU,SAACC,EAAMC,GAGd,MAAA,CACLC,GAAIF,EAAOL,GAAaE,EAAY,IACpCM,GAAIT,EAAWO,GAAOH,EAAW,MAI/BM,EAAS,SAACC,GAAO,OAACA,EAAGC,MAAM,WAAa,CAAC,KAAK,GAAGC,QAAQ,iBAAkB,SAACC,EAAGC,EAAIC,GACnFC,IAAAA,EAAIC,SAASH,EAAI,IACfI,EAAOF,GAAK,GAAK,KAAO,KAGvBA,OAFE,GAALA,IAAQA,EAAI,IACZA,EAAI,KAAIA,GAAK,IACVA,EAAI,IAAMD,EAAK,IAAMG,KAG1BC,OAAJ,EACMC,EAAW,SAAXA,IACJC,MAAMxB,EAAO,WAAWyB,KAAK,SAAAC,GAAOA,OAAAA,EAAIC,SAAQF,KAAK,SAAAZ,GAC/CS,GAAAA,IAAUT,EAAVS,CAIJA,EAAQT,EACRd,EAAU6B,UAAY,SAChBC,IAAAA,EAAuEhB,gEAAAA,EAA7E,oBACAlB,EAAMmC,aAAa,OAAQD,GAC3BlC,EAAMmC,aAAa,aAAcD,GACjC9B,EAAUgC,UAAYnB,EAAOC,QAR3BmB,WAAWC,sBAAuB,IAAWV,MAWnD5B,EAAMuC,OAAS,WACbF,WAAWC,sBAAuB,IAAWV,GAC7CxB,EAAU6B,UAAY,IAExBjC,EAAMwC,QAAU,WACdb,EAAQ,KACRU,WAAWC,sBAAuB,IAAMV,IAG1C,IAAMa,EAAmB,SAAnBA,IACJZ,MAAMxB,EAAO,2BAA2ByB,KAAK,SAAAC,GAAOA,OAAAA,EAAIW,SAAQZ,KAAK,SAAAa,GACnExC,EAAKiC,UAAY,GACjBO,EAAKC,SAASC,QAAQ,SAAAC,GACZC,IAAAA,EAAgBD,EAAEE,SAAlBD,YACFE,EAAMrC,EAAQmC,EAAY,GAAIA,EAAY,IACPD,EAAAA,EAAEI,WAAnCC,EAAAA,EAAAA,aAAcC,EAAAA,EAAAA,eAClBD,GACFhD,EAAKkD,mBAAmB,YAAmCJ,sBAAAA,EAAIlC,EAASkC,QAAAA,EAAIjC,EAAuDmC,sDAAAA,EAAnI,YAEEC,GACFjD,EAAKkD,mBAAmB,aAAqCJ,wBAAAA,EAAIlC,EAAE,IAAUkC,SAAAA,EAAIjC,EAAE,IAAmBsC,iBAAAA,EAAtG,QAA6JF,8CAAAA,EAAmBH,KAAAA,EAAIlC,EAAMkC,KAAAA,EAAIjC,EAA9L,UAGJqB,WAAWC,sBAAuB,KAAeG,MAIrDb,IACAa","file":"mini.4425e428.map","sourceRoot":"..","sourcesContent":["const $rain = document.getElementById('rain');\nconst $obs = document.getElementById('obs');\nconst $datetime = document.getElementById('datetime');\nconst HOST = 'https://api.checkweather.sg';\nconst lowerLat = 1.156, upperLat = 1.475, lowerLong = 103.565, upperLong = 104.130;\nconst longRange = upperLong - lowerLong;\nconst latRange = upperLat - lowerLat;\n\nimport arrowDown from '../assets/arrow-down.svg';\n\nconst calcPos = (long, lat) => {\n  // Note: These are inaccurate measurements.\n  // Maybe only works for Singapore since it's small.\n  return {\n    x: (long - lowerLong) / longRange * 400,\n    y: (upperLat - lat) / latRange * 226,\n  };\n};\n\nconst timeID = (id) => (id.match(/\\d{4}$/) || [''])[0].replace(/(\\d{2})(\\d{2})/, (m, m1, m2) => {\n  let h = parseInt(m1, 10);\n  const ampm = h >= 12 ? 'PM' : 'AM';\n  if (h == 0) h = 12;\n  if (h > 12) h -= 12;\n  return h + ':' + m2 + ' ' + ampm;\n});\n\nlet nowID;\nconst showRain = () => {\n  fetch(HOST + '/now-id').then(res => res.text()).then(id => {\n    if (nowID === id){\n      setTimeout(requestAnimationFrame, 60 * 1000, showRain); // every min\n      return;\n    }\n    nowID = id;\n    $datetime.visiblity = 'hidden';\n    const path = `https://www.weather.gov.sg/files/rainarea/50km/v2/dpsri_70km_${id}0000dBR.dpsri.png`;\n    $rain.setAttribute('href', path);\n    $rain.setAttribute('xlink:href', path);\n    $datetime.innerHTML = timeID(id);\n  });\n}\n$rain.onload = () => {\n  setTimeout(requestAnimationFrame, 60 * 1000, showRain); // every min\n  $datetime.visiblity = '';\n};\n$rain.onerror = () => {\n  nowID = null;\n  setTimeout(requestAnimationFrame, 1000, showRain);\n};\n\nconst showObservations = () => {\n  fetch(HOST + '/observations?compact=1').then(res => res.json()).then(body => {\n    $obs.innerHTML = '';\n    body.features.forEach(f => {\n      const { coordinates } = f.geometry;\n      const pos = calcPos(coordinates[0], coordinates[1]);\n      const { temp_celcius, wind_direction } = f.properties;\n      if (temp_celcius) {\n        $obs.insertAdjacentHTML('beforeend', `<text class=\"t\" x=\"${pos.x}\" y=\"${pos.y}\" text-anchor=\"middle\" dominant-baseline=\"central\">${temp_celcius}Â°</text>`);\n      }\n      if (wind_direction) {\n        $obs.insertAdjacentHTML('afterbegin', `<image class=\"w\" x=\"${pos.x-20}\" y=\"${pos.y-20}\" xlink:href=\"${arrowDown}\" width=\"40\" height=\"40\" transform=\"rotate(${wind_direction}, ${pos.x}, ${pos.y})\"/>`);\n      }\n    });\n    setTimeout(requestAnimationFrame, 2 * 60 * 1000, showObservations); // every 2 mins\n  });\n}\n\nshowRain();\nshowObservations();\n\n// fetch('https://api.checkweather.sg/now?ascii=1').then(res => res.text()).then(body => {\n//   let id, data = [];\n//   body.split('\\n').forEach((line, i) => {\n//     if (i === 0){\n//       id = line;\n//     } else {\n//       for (let j=0, l=line.length; j<l; j++) {\n//         const c = line[j];\n//         if (!data[i-1]) data[i-1] = [];\n//         data[i-1].push(c.charCodeAt()-33);\n//       }\n//     }\n//   });\n//   console.log(id, data);\n\n// });"]}